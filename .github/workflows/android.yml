name: Android CI and CD

on:
  push:
    branches: 
      - main
      - qa
      - develop
  pull_request:
    branches: 
      - main
      - qa

env:
  AWS_DEFAULT_REGION: "as-east-1"

jobs:
  build:
    runs-on:
       - ubuntu-latest

    steps:
    - name : Check out Git Repository
      uses: actions/checkout@v3

    - name: set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: gradle
          
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Gradle Clean
      run: ./gradlew clean
      
    - name: Gradle Lint
      run: ./gradlew lint
      
    - name: Gradle Build and generating apk files
      run: ./gradlew build
      
    - name: Cache SonarQube packages
      uses: actions/cache@v1
      with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
   
   
    - name: Cache Gradle packages
      uses: actions/cache@v1
      with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle
          
    # - name: Code Scan Analysis - SonarQube
    #   env:
    #       SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    #       SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
    #   run: ./gradlew sonarqube -Dsonar.projectKey=android-demo-app
      
    - name: Date and Time
      run: echo "::set-output name=current_date_time::$(date +"%d-%m-%Y-%H-%I-%M-%S")"
      id : date

    - name: Copy APK files to a directory
      run: |
         mkdir -p apk-files/debug apk-files/release
         
         cp ${{ github.workspace }}/app/build/outputs/apk/debug/app-debug.apk ${{ github.workspace }}/apk-files/debug/app-debug.apk 
         mv ${{ github.workspace }}/apk-files/debug/app-debug.apk ${{ github.workspace }}/apk-files/debug/app-debug-${{ steps.date.outputs.current_date_time }}.apk
         
         cp ${{ github.workspace }}/app/build/outputs/apk/release/app-release-unsigned.apk ${{ github.workspace }}/apk-files/release/app-release-unsigned.apk
         mv ${{ github.workspace }}/apk-files/release/app-release-unsigned.apk ${{ github.workspace }}/apk-files/release/app-release-unsigned-${{ steps.date.outputs.current_date_time }}.apk
      
    - name: Upload apk-files Directory
      uses: actions/upload-artifact@v3
      with:
        name: apk-files-artifactory
        path: ${{ github.workspace }}/apk-files/
        if-no-files-found: ignore
      
    # - name : Notification to Teams
    #   uses: toko-bifrost/ms-teams-deploy-card@master #  or "./" if in a local set-up
    #   if: always()
    #   with:
    #       github-token: ${{ secrets.CI_GITHUB_TOKEN  }}
    #       webhook-uri: ${{ secrets.MS_TEAMS_WEBHOOK_URI }}
    # outputs:
    #     CURRENT_DATE_TIME: ${{ steps.date.outputs.current_date_time }}

  deploy:
    runs-on: ubuntu-latest
    needs: build
      
    steps:
    - name : Check out Git Repository
      uses: actions/checkout@v2
      
    - name : Download apk-files Artifactory
      uses: actions/download-artifact@v3
      with:
        name: apk-files-artifactory
        path: ${{ github.workspace }}/apk-files/
    - name: Display structure of downloaded files of Artifact 
      run: ls -R
      working-directory: ${{ github.workspace }}/apk-files/
      
    - name: Public IP of Github Hosted Runner
      id: ip
      uses: haythem/public-ip@v1.3
      
    
    - name: Add Github Actions IP to Security group
      run: |
         aws ec2 authorize-security-group-ingress --group-id ${{ secrets.JFROG_SG_ID }} --protocol tcp --port 8082 --cidr ${{ steps.ip.outputs.ipv4 }}/32
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: 'us-east-1'


      